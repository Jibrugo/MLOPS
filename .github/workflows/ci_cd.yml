name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # D√©clenche l'action lors d'un push sur main
  pull_request:
    branches:
      - main  # D√©clenche l'action lors d'une PR vers main

jobs:
  build:
    runs-on: ubuntu-latest  # Utilise Ubuntu comme environnement

    steps:
    # 1Ô∏è‚É£ R√©cup√©ration du code source
    - name: Checkout code
      uses: actions/checkout@v4

    # 2Ô∏è‚É£ Configuration de Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3Ô∏è‚É£ Connexion √† Docker Hub ou GitHub Container Registry (GHCR)
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # üî¥ √Ä configurer dans GitHub Secrets
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4Ô∏è‚É£ Cache Docker pour acc√©l√©rer les builds
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # 5Ô∏è‚É£ Build & Push des images Docker pour service_a et service_b
    - name: Build & Push Docker image for service_a
      uses: docker/build-push-action@v5
      with:
        context: ./service_a
        file: ./service_a/Dockerfile
        push: true  # On pousse l'image apr√®s build
        tags: user_name/service_a:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build & Push Docker image for service_b
      uses: docker/build-push-action@v5
      with:
        context: ./service_b
        file: ./service_b/Dockerfile
        push: true
        tags: user_name/service_b:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 6Ô∏è‚É£ Lancement des tests avec Docker Compose
    - name: Run tests
      run: |
        docker-compose up -d --wait  # Assure que les services sont bien d√©marr√©s
        docker-compose exec service_a pytest || exit 1  # Ex√©cute les tests avec pytest
        docker-compose down  # Nettoyage des services apr√®s tests

    # 7Ô∏è‚É£ D√©ploiement en production (si n√©cessaire)
    - name: Deploy to production
      run: |
        ssh user@your_server <<EOF
          docker pull user_name/service_a:latest
          docker pull user_name/service_b:latest
          docker-compose up -d --remove-orphans
        EOF
